import { parseCoords } from "../../utils";

describe("parseCoords", () => {
  test('должен корректно парсить формат с пробелом: "51.50851, -0.12572"', () => {
    const result = parseCoords("51.50851, -0.12572");
    expect(result).toEqual({ latitude: 51.50851, longitude: -0.12572 });
  });

  test('должен корректно парсить формат без пробела: "51.50851,-0.12572"', () => {
    const result = parseCoords("51.50851,-0.12572");
    expect(result).toEqual({ latitude: 51.50851, longitude: -0.12572 });
  });

  test('должен корректно парсить формат со скобками: "[51.50851, -0.12572]"', () => {
    const result = parseCoords("[51.50851, -0.12572]");
    expect(result).toEqual({ latitude: 51.50851, longitude: -0.12572 });
  });

  test("должен выбрасывать ошибку для некорректного ввода: пустая строка", () => {
    expect(() => parseCoords("")).toThrow(
      "Неверный формат координат. Ожидается 'ширина, долгота'",
    );
  });

  test("должен выбрасывать ошибку, если нет запятой", () => {
    expect(() => parseCoords("51.50851 -0.12572")).toThrow(
      "Неверный формат координат. Ожидается 'ширина, долгота'",
    );
  });

  test("должен выбрасывать ошибку, если слишком много значений", () => {
    expect(() => parseCoords("51.50851, -0.12572, 123")).toThrow(
      "Неверный формат координат. Ожидается 'ширина, долгота'",
    );
  });

  test("должен выбрасывать ошибку, если значения не являются числами", () => {
    expect(() => parseCoords("text, other_text")).toThrow(
      "Неверный формат координат. Ожидается 'ширина, долгота'",
    );
  });

  test("должен выбрасывать ошибку, если широта вне диапазона", () => {
    expect(() => parseCoords("91, 100")).toThrow(
      "Некорректные значения широты или долготы.",
    );
  });

  test("должен выбрасывать ошибку, если долгота вне диапазона", () => {
    expect(() => parseCoords("50, 181")).toThrow(
      "Некорректные значения широты или долготы.",
    );
  });
});
